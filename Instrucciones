# Instrucciones de Desarrollo

## Estructura del Proyecto

1. **Componentes**:

   - Ubicar en `src/components/`
   - Organizar por funcionalidad o tipo
   - Usar nombres descriptivos
   - Mantener componentes pequeños y reutilizables

2. **Páginas**:

   - Ubicar en `src/app/`
   - Seguir la estructura de rutas de Next.js
   - Usar layouts cuando sea necesario
   - Mantener la lógica de negocio en servicios

3. **Servicios**:

   - Ubicar en `src/services/`
   - Separar por dominio o funcionalidad
   - Encapsular lógica de API
   - Manejar errores y estados de carga

4. **Tipos**:

   - Definir interfaces y tipos en `src/types/`
   - Usar nombres descriptivos
   - Documentar tipos complejos
   - Mantener tipos actualizados

5. **Estilos**:
   - Usar Tailwind CSS
   - Seguir el sistema de diseño
   - Mantener consistencia
   - Usar variables de tema

## Convenciones de Código

1. **Nombres**:

   - Usar PascalCase para componentes
   - Usar camelCase para funciones y variables
   - Usar UPPER_CASE para constantes
   - Usar nombres descriptivos

2. **Componentes**:

   - Usar componentes funcionales
   - Usar hooks de React
   - Mantener componentes pequeños
   - Documentar props

3. **Estilos**:

   - Usar clases de Tailwind
   - Mantener consistencia
   - Usar variables de tema
   - Seguir el sistema de diseño

4. **API**:
   - Usar servicios dedicados
   - Manejar errores
   - Usar tipos TypeScript
   - Documentar endpoints

## Buenas Prácticas

1. **Código**:

   - Mantener código limpio
   - Usar TypeScript
   - Documentar código
   - Seguir principios SOLID

2. **Rendimiento**:

   - Optimizar imágenes
   - Usar lazy loading
   - Minimizar re-renders
   - Optimizar bundle size

3. **SEO**:

   - Usar metadatos
   - Optimizar títulos
   - Usar descripciones
   - Implementar schema.org

4. **Accesibilidad**:
   - Usar semántica HTML
   - Mantener contraste
   - Usar ARIA labels
   - Probar con lectores

## Flujo de Trabajo

1. **Desarrollo**:

   - Crear rama feature
   - Seguir convenciones
   - Hacer commits descriptivos
   - Revisar código

2. **Testing**:

   - Escribir tests
   - Probar en diferentes navegadores
   - Verificar responsive
   - Probar accesibilidad

3. **Despliegue**:

   - Revisar cambios
   - Verificar build
   - Probar en staging
   - Desplegar a producción

4. **Mantenimiento**:
   - Monitorear errores
   - Actualizar dependencias
   - Optimizar rendimiento
   - Documentar cambios
